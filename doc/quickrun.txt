*quickrun.txt*	Run a command and show its result quickly.

Version: 0.5.0
Author: thinca <thinca+vim@gmail.com>
English documentation by:
  * ujihisa <ujihisa at gmail com>
  * tyru <tyru.exe@gmail.com>
License: Creative Commons 2.1 Japanese
	 <http://creativecommons.org/licenses/by/2.1/jp/>

==============================================================================
CONTENTS					*quickrun-contents*

INTRODUCTION			|quickrun-introduction|
INTERFACE			|quickrun-interface|
  COMMANDS			  |quickrun-commands|
  FUNCTIONS			  |quickrun-functions|
  KEY MAPPINGS			  |quickrun-key-mappings|
OPTIONS				|quickrun-options|
  OPTION SYNTAX			  |quickrun-syntax-option|
  FORMAT OF EXEC		  |quickrun-exec-format|
SETTINGS			|quickrun-settings|
MODULE				|quickrun-module|
  RUNNER			  |quickrun-module-runner|
  OUTPUTTER			  |quickrun-module-outputter|
CREATE MODULE			|quickrun-create-module|
  REGISTER MODULE		  |quickrun-register-module|
  SESSION			  |quickrun-session|
  MODULE COMMON ATTRIBUTES	  |quickrun-module-attributes|
  RUNNER ATTRIBUTES		  |quickrun-runner-attributes|
  OUTPUTTER ATTRIBUTES		  |quickrun-outputter-attributes|
KNOWN ISSUES			|quickrun-known-issues|
CHANGELOG			|quickrun-changelog|


==============================================================================
INTRODUCTION					*quickrun-introduction*

*quickrun* is Vim plugin to execute whole/part of editing file.
It provides |:QuickRun| for it.

Requirement:
- Vim 7.2 or later

Latest Version:
http://github.com/thinca/vim-quickrun


						*quickrun-synopsis*
>
	" Execute current buffer.
	:QuickRun

	" Execute current buffer from line 3 to line 6.
	:3,6QuickRun

	" Execute current buffer as perl program.
	:QuickRun perl

	" Execute one-liner program given from command-line.
	:QuickRun ruby -src 'puts "Hello, world!"'


	" (In .vimrc) Set default program to execute haskell program to hugs.
	let g:quickrun_config = {}
	let g:quickrun_config.haskell = {'command' : 'runhugs'}

	" Set shortcut keys.
	for [key, com] in items({
	\   '<Leader>x' : '>:',
	\   '<Leader>p' : '>!',
	\   '<Leader>w' : '>',
	\   '<Leader>q' : '>>',
	\ })
		execute 'nnoremap <silent>' key ':QuickRun' com '-mode n<CR>'
		execute 'vnoremap <silent>' key ':QuickRun' com '-mode v<CR>'
	endfor
<


==============================================================================
INTERFACE					*quickrun-interface*

------------------------------------------------------------------------------
COMMANDS					*quickrun-commands*

						*:QuickRun*
:[range]QuickRun [{type}] [<{input}] [>[>][{output}]] [-option value]...
	Execute program with misc. options.
	See |quickrun-options| for supported options.
	Options are pairs of names, values like:
>
	-name value
<
	You can specify options as possible.
	All options are insensitive to the order.
	If value contains whitespaces,
	you must quote with single quote or double quote.
	And you want to specify single quote(s) or double quote(s)
	inside it, you must escape with backslash(es).

	{type} is abbreviation to -type {type}
	<{input} is abbreviation to -input {input}
	>{output} is abbreviation to -output {output}
	>>{output} is abbreviation to -append 1 -output {output}

	|:Quickrun| can take |:range|.
	if it was not given, |:QuickRun| treats whole lines.
	If you specify '<,'> and do not specify -mode
	(|quickrun-option-mode|), target is selected text in visual mode. And
	|blockwise-visual| also works.  But when |:QuickRun| is executed from
	key mapping, you need to specify -mode because |:QuickRun| can't
	detect current mode.


------------------------------------------------------------------------------
FUNCTIONS					*quickrun-functions*

quickrun#operator({wise})			*quickrun#operator()*
	A function for 'operatorfunc'.
	e.g.: >
	nnoremap <silent> <C-CR> :<C-u>set opfunc=quickrun#operator<CR>g@ip
<	This runs current paragraph (|ip|) with <C-CR>.

						*quickrun#register_module()*
quickrun#register_module({kind}, {name}, {module})
	Registers {module}. See details in |quickrun-create-module|.

quickrun#register_runner({name}, {runner})	*quickrun#register_runner()*
	An alias of quickrun#register_module("runner", {name}, {runner}).

						*quickrun#register_outputter()*
quickrun#register_outputter({name}, {outputter})
	An alias of quickrun#register_module("outputter", {name}, {outputter}).

						*quickrun#session()*
quickrun#session({key} [, {func-name} [, {args} ...]])
	This is used in a module. This fetches the current runnning session if
	you skipped {func-name}. This calls the session function with
	arguments {args} if you specified {func-name}.


------------------------------------------------------------------------------
KEY MAPPINGS					*quickrun-key-mappings*

<Plug>(quickrun-op)				*<Plug>(quickrun-op)*
			Execute next motion's range.
			This sets 'operatorfunc' to "QuickRun".

<Plug>(quickrun)				*<Plug>(quickrun)*
			Execute and display the result for current buffer.
			This is normally same as |:QuickRun|
			without arguments.
<

					*g:quickrun_no_default_key_mappings*
Following key mapings will NOT be defined if it's already mapped,
or |g:quickrun_no_default_key_mappings| has been set to 1.

{lhs}			{rhs}
--------		-----------------------------
<Leader>r		<Plug>(quickrun)



==============================================================================
OPTIONS					*quickrun-options*

Here are the list of options you can specify at command-line.
|g:quickrun_config| is used for options which are not specified.
See |quickrun-syntax-option| for options with (*).

type					*quickrun-option-type*
			Template for current setting.
			Default value is 'filetype',
			See |g:quickrun_config| for more details.

exec (*)				*quickrun-option-exec*
			Format of executed commands.
			You can specify multiple values.
			See |g:quickrun_config| for more details.

command					*quickrun-option-command*
			String expanded to %c in exec.
			If not specified, same value as type is used.

cmdopt (*)				*quickrun-option-cmdopt*
			String expanded to %o in exec.

src					*quickrun-option-src*
			Executed program.
			Default value is whole lines of editing file.

args (*)				*quickrun-option-args*
			String expanded to %a in exec.

input (*)				*quickrun-option-input*
			Filename to be stdin of program.
			If first character starts with =,
			quickrun treats continued string as input.

outputter				*quickrun-option-outputter*
			Specifies an outputter. See the details in
			|quickrun-module-outputter|.

runner					*quickrun-option-runner*
			Specifies a runner. See the details in
			|quickrun-module-runner|.

mode					*quickrun-option-mode*
			This value is one of n, v, o .
			This changes behavior of getting the range text.
			Normally this is automatically set by quickrun.
			But you need to care this value
			when you invoke |:QuickRun| from own key mappings.
			e.g.: >
				nnoremap <silent> <F5> :QuickRun -mode n<CR>
				vnoremap <silent> <F5> :QuickRun -mode v<CR>

output_encode (*)			*quickrun-option-output_encode*
			Encoding conversion filter like "from:to".  ":to" is
			omitable.  In that case, it is interpreted like
			"from:&encoding".
			Default value is "&fileencoding".

shebang					*quickrun-option-shebang*
			If this value is not 0, and if "src"'s first line
			started with "#!", the following string is treated as
			"command".  In this case, "%c" is not escaped.
			See |quickrun-exec-format| about escaping.
			Default value is 1.

tempfile (*)				*quickrun-option-tempfile*
			quickrun makes temporary file to execute part of
			lines.
			This value is template for its filename.
			Temporary file will be removed after execute.
			Default value is "{tempname()}".

shellcmd				*quickrun-option-shellcmd*
			Template of Vim's command which is executed
			if output is ! .
			quickrun substitutes %s with commands generated
			by exec option.
			On MS Windows, default value is
			'silent !"%s" & pause'.  Otherwise '!%s'.

eval					*quickrun-option-eval*
			If this value is not 0, quickrun substitutes src
			embedding to eval_template.

eval_template				*quickrun-option-eval_template*
			Template for eval.
			quickrun substitutes %s with src.


------------------------------------------------------------------------------
OPTION SYNTAX				*quickrun-syntax-option*

Specific options which have (*) have special syntax.
Words which start with @, &, $ are evaluated as register, (Vim's) option,
environment variable, respectively.
You can wrap {} around each word explicitly to clarify its boundary.
e.g.: >
	@a
	&{fileencoding}
	$PATH
	%{expr}
{expr} is evaluated using |eval()|.
If an error occurred, it is replaced by empty string.
If you want to avoid evaluation, you need to escape with \ .


------------------------------------------------------------------------------
FORMAT OF EXEC				*quickrun-exec-format*

This value is format of executed commands.
You can use symbols like the followings.
You can also use same symbols altogether.



Symbol		Result ~
--------	------
%%		%
%c		Command (|quickrun-option-command|)
%o		Command line option (|quickrun-option-cmdopt|)
%s		Source (|quickrun-option-src|)
%a		Script's arguments (|quickrun-option-args|)

%c and %s are symbols that specifies file.  These are escaped by
|shellescape()|.  This can be evaded by using capital letter(%C %S) for the
symbol.
You can use |filename-modifiers| for the symbols.
>
	java %S:r:gs?[/\\]?.?
<
And newline(s) are replaced by a whitespace.

Execute Vim ex command
------------------------
If first character of result of exec is ":",
It is executed as Vim's ex command.
And in this case, symbols to specify file are escaped by |fnameescape()|.

Specify multiple command
------------------------
If you specify multiple exec options to |:QuickRun|,
or specify |List| to exec in |g:quickrun_config|.
quickrun executes them in order.
It is useful when you need to do compile, clean up something.



==============================================================================
SETTINGS					*quickrun-settings*
						*g:quickrun_config*

You can define default values using |g:quickrun_config|.
"Default Value" is |Dictionary| whose key is |quickrun-options| names.
And |g:quickrun_config| is |Dictionary| whose key is {type},
and its value is "Default Value".
{type} is option value given as |quickrun-option-type| from command-line.
If it is not specified, current 'filetype' is used instead.
Special {type} '_' has default values for all unspecified keys by each
"Default value".

Options given by command-line has higher priority than {type} specific
settings.
And {type} specific settings has higher priority than {type} '_' settings.

Default settings				*g:quickrun#default_config*
----------------
|g:quickrun#default_config| has default settings
which has same structure as |g:quickrun_config|.
Default values on |quickrun-options| are actually this value.
Usually you don't have to care this variable.

Buffer-local settings				*b:quickrun_config*
---------------------
You can specify buffer-local settings using |b:quickrun_config|.
You need to specify "Default Value" different from |g:quickrun_config|.
This has higher priority any other settings
without options given by command-line.


Here is the order to have higher priorities.

1. Options given by command-line
2. |b:quickrun_config|
3. |g:quickrun_config|'s {type}
4. |g:quickrun#default_config|'s {type}
5. |g:quickrun_config|'s '_'
6. |g:quickrun#default_config|'s '_'

If you set {type} with 1 or 2, it will be loaded by 3 and 4.
In addition, if you set {type} with 3 or 4, {type} is overwrote and reload the
current (3 or 4) config.  Note infinite loop.


==============================================================================
MODULE					*quickrun-module*

|quickrun| is structured modularly. There are the following kinds of modules.

- runner	(|quickrun-module-runner|)
- outputter	(|quickrun-module-outputter|)

A module sometimes has its specific options. You may specify an option as a
normal option or as a postfix of the module.

Specifying an option as a normal option
--------------------------
A module reads options with the following prioitized order when you specified
an option as a normal option.

1. "{module-type}/{module-name}/{option-name}"
2. "{module-type}/{option-name}"
3. "{option-name}"

For example when you'd like to give "append" option to "outputter/buffer"
module, you can give it by
>
	let b:quickrun_config = {'outputter/buffer/append': 1}
<
or,
>
	:QuickRun -outputter/buffer/append 1
<
Furthermore the following way is also available, whereas if there is a more
prioitized option then that'll be prioitized.
>
	:QuickRun -append 1
<

Specifying an option as a postfix of a module
----------------------
You may give an option when you give a module in command line option. Write an
arbitrary symbol after the module name, and split option values with the
symbol. Specify each options in name=value format.
>
	:QuickRun -outputter buffer:append=1:into=1
<
Some modules only have one single option or have specific order of options
defined in |quickrun-module.config_order|. In this case, you don't have to
give name.
>
	:QuickRun -outputter file:/path/to/file
<
If the value of option is list, it appends the option value.


|quickrun-syntax-option| expands any options before they go to the module.

------------------------------------------------------------------------------
RUNNER						*quickrun-module-runner*

Runner is a module to run a program. The following runners are available by
default. NOTE: Everything except for "system" can be unstable.

- "system"				*quickrun-module-runner/system*
  Runs by |system()|. This is the default.

- "shell"				*quickrun-module-runner/shell*
  Runs by |:!|. This ignores given outputter.
  Option ~
  {shellcmd}		Default: 'silent !"%s" & pause' for MS Windows
				    Otherwise '!%s'
	The template of the Vim command to run. This replaces %s to the
	command given in exec option.

- "vimproc"				*quickrun-module-runner/vimproc*
  {Requirement: |vimproc|}
  Runs by |vimproc| in background. This checks if the process completed with
  using |CursorHold| |CursorHoldI| events. If the process completed within 50
  millisecond, it shows the result immediately.
  Option ~
  {updatetime}		Default: 0
	Changes 'updatetime' to the value temporary. Stays same if this is 0.

- "remote"				*quickrun-module-runner/remote*
  {Requirement: |+clientserver|}
  Runs in background and fetches the result by |+clientserver| feature.
  This requires |v:servername| to be set. If Vim doesn't, run it with
  |--servername| option.

  Note that Vim cannot control the process when it doesn't terminate due to
  infinite loop or to wait for input since it runs in background.
  Option ~
  {vimproc}		Default: 0
	Runs by |vimproc| if it's available. You can cancel the process after
	it ran.

- "python"				*quickrun-module-runner/python*
  {Requirement: |+python|}
  Runs by |python| thread asynchronously.
  WARNING: This is absolutely unstable.
  WARNING: Don't use this on X11. Vim crashes.


------------------------------------------------------------------------------
OUTPUTTER					*quickrun-module-outputter*

Outputter is a module to output the result. The following outputters are
available by default.

- "buffer"				*quickrun-module-outputter/buffer*
  quickrun opens output buffer and displays to the output buffer.  If output
  buffer already exists, quickrun uses it.  And for customize, quickrun sets
  "quickrun" to 'filetype' of this buffer. This is the default.
  Option ~
  {append}		Default: 0
	Appends if it's 1.
  {split}
	Default: '{winwidth(0) * 2 < winheight(0) * 5 ? "" : "vertical"}'

	Specifies a sub-command to open a buffer for the output. |quickrun|
	inserts this before |:split| command when it opens a buffer.
  {into}		Default: 0
	Moves cursor to the output buffer if this isn't 0.
  {running_mark}	Default: ':-)'
	If this value is not an empty string, |quickrun| displays this string
	to output buffer while it's running.

- "message"				*quickrun-module-outputter/message*
  Outputs on |messages|.
  Option ~
  {log}			Default: 0
	Outputs on |message-history| is it's 1.

- "variable"				*quickrun-module-outputter/variable*
  Outputs on a variable. You also can let it output on an environment variable
  or an option.
  Option ~
  {name}		Default: ''
	The name of the variable to output. Causes an error if it's empty.
  {append}		Default: 0
	Appends if it's 1.

- "file"				*quickrun-module-outputter/file*
  Outputs on a file.
  Option ~
  {name}		Default: ''
	The file name where to output. Causea an error if it's empty.
  {append}		Default: 0
	Appends if it's 1.

- "quickfix"				*quickrun-module-outputter/quickfix*
  Outputs on |quickfix|.
  Option ~
  {errorformat}		Default: "&errorformat"
	'errorformat' option to parse the output.

- "browser"				*quickrun-module-outputter/browser*
  {Requires |open-browser|}
  Opens the output on browser, using |open-browser|.
  Option ~
  {name}		Default: tempname() . '.html'
	The name of the filename; outputs the result on a file first then open
	the file on your browser. The default value, |tempname()|, is called
	only at once and the same result will be used since the second time.
  {append}		Default: 0
	Appends if it's 1.

- "buffered"				*quickrun-module-outputter/buffered*
  Buffers the output, and shows the whole result at once finally.
  Option ~
  {target}		Default: ''
	The outputter to show the result.

- "multi"				*quickrun-module-outputter/multi*
  Outputs multiple outputters at the same time.
  Option ~
  {targets}		Default: []
	A list of outputters to output.

- "error"				*quickrun-module-outputter/error*
  Switches where to output based on the exit status; 0 means success. Note that
  some runners only can give success.
  This buffers because this waits the process terminates.
  Option ~
  {success}		Default: "null"
	The outputter when it succeeded.
  {error}		Default: "null"
	The outputter when it failed.

- "null"				*quickrun-module-outputter/null*
  No outputs.



==============================================================================
CREATE MODULE				*quickrun-create-module*

A module is just a dictionary(|Dictionary|) that has specific attributes,
what's the problem? You can use the module after registering it.

------------------------------------------------------------------------------
REGISTER MODULE				*quickrun-register-module*

You use a module with registering by |quickrun#register_module()| or its
handier version |quickrun#register_runner()| and
|quickrun#register_outputter()|. You can also register a module automatically
by making autoload#quickrun#{module-kind}#{module-name}#new() function in
autoload/quickrun/{module-kind}/{module-name}.vim in 'runtimepath'. That'll be
loaded when quickrun is loaded for the first time in the process.

------------------------------------------------------------------------------
SESSION				*quickrun-session*

Quickrun manages an execution as a {session}, and gives it as an argument to
functions of a module.

session.make_module({kind}, {line})	*quickrun-session.make_module()*
	Creates a module to use it in a session.

session.output({data})			*quickrun-session.output()*
	Calls when the runner outputs the result. Gives the {data} to
	outputter at the time. You can call is at any times when the process
	is running.

session.continue()			*quickrun-session.continue()*
	Calls when the runner cannot complete the process at the time.
	Continues if you give {key} to |quickrun#session()|.

session.finish([{exit-code}])		*quickrun-session.finish()*
	Calls when the runner finished the process. Unless {exit-code} is
	given it'll be 0.

session.exit_code			*quickrun-session.exit_code*
	You can refer this only after the process finished. This is the value
	of |quickrun-session.finish()|.

session.sweep()				*quickrun-session.sweep()*
	This is a cleaning up. This does procedures with respect to the
	following attributes in the session.
	- If it has an attribute begins with "_temp_", deletes the file.
	- If it has an attribute "_option_{option-name}", recovers the object
	  value.
	- If it has an attribute begins with "_autocmd_", deletes all autocmd
	  belonging to "plugin-quickrun-{value}".
	- If it has an attribute "_vimproc", forcefully terminates the |vimproc|.
	Or calls |quickrun-runner.sweep()|.
	They are handy, however, they don't care naming colisions by multiple
	modules. The author is going to solve them in the future.

------------------------------------------------------------------------------
MODULE COMMON ATTRIBUTES				*quickrun-module-attributes*

Most module attributes have default values, so you don't have to explicitly
set unless it requires one. Of course you can overwrite the default value if
you want.

Quickrun uses a copy of a module you registered. To preserve a value among
each modules, use attributes which name begin with "_" to avoid conflicts.

Below common attributes among all modules.

module.config				*quickrun-module.config*
	This is a dictionary for the module config default values. The items
	defined in this are only available in modules. When you actually use a
	module, session will overwrite a config.

module.config_order			*quickrun-module.config_order*
	This is a list of order of the arguments of config. You can give
	arbitrary order of names in |quickrun-module.config|.

module.available()			*quickrun-module.available()*
	Checks if the module is avaiable, using |quickrun-module.validate()|.
	Returns 1 if it's available; otherwise returns 0.

module.validate()			*quickrun-module.validate()*
	Validates if the module is currently available. If not, thie |:throw|s
	the reason in String.

module.init({session})			*quickrun-module.init()*
	This is called in module initialization.

------------------------------------------------------------------------------
RUNNER ATTRIBUTES				*quickrun-runner-attributes*

runner.run({commands}, {input}, {session})	*quickrun-runner.run()*
	Required. This is called in run-time. This runs the list of command
	given in {commands}, and returns {exit-code}. {input} is data for
	stdion. When this cannot finish the process at the time this uses 
	|quickrun-session.continue()|. In the case this has to call
	|quickrun-session.finish()|.

runner.sweep()				*quickrun-runner.sweep()*
	This is called when the process is finished or forcefully terminated.
	This sweeps data.

------------------------------------------------------------------------------
OUTPUTTER ATTRIBUTES			*quickrun-outputter-attributes*

outputter.output({data}, {session})	*quickrun-outputter.output()*
	Required. Outputs the data.

outputter.finish({session})		*quickrun-outputter.finish()*
	Called in termination for finishing it. You can refer
	|quickrun-session.exit_code|.



==============================================================================
KNOWN ISSUES					*quickrun-known-issues*

- |quickrun-module-runner/vimproc| doesn't support : to run a Vim command.

- It depends on runner how to handle multiple stdins when you gave multiple
  commands

- Quickrun cannot distinguish stdout from stderr.
  - It depends on runner which order to output.



==============================================================================
CHANGELOG					*quickrun-changelog*

See Japanese help or git-log.

==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
